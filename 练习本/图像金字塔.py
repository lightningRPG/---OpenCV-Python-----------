# coding:utf-8
# """图像金字塔"""

import cv2 as cv
import numpy as np
import sys

# 图像金字塔由来：
#     通常情况下，我们习惯于用一个恒定尺寸的图像工作。
#     但在某些情况下，我们需要使用不同分辨率的（相同）图像。
#     例如，当我们在图像中搜索某个东西时，比如人脸，
#     我们不确定该物体将以何种尺寸出现在所述图像中。
#     在这种情况下，我们需要创建一组具有不同分辨率的相同图像，并在所有这些图像中搜索物体。
#     这些具有不同分辨率的图像集被称为图像金字塔（因为当它们被保存在一个堆栈中，
#     最高分辨率的图像在底部，最低分辨率的图像在顶部，它看起来像一个金字塔
# 图像金字塔的应用：两张图片的无缝衔接

lena = '../pictures/lena.png'
color_img = cv.imread(lena)

# """
#     原理：
#     有两种图像金字塔：
#           1、高斯金字塔和 
#           2、拉普拉斯金字塔
#
#     高斯金字塔中的高层次（低分辨率）是通过去除低层次（高分辨率）
#     图像中的连续行和列而形成的。然后，高一级的每个像素由底层的5个像素的高斯权重贡献形成。
#     通过这样做，M×N的图像变成了M/2×N/2的图像。
#     因此，面积减少到原始面积的四分之一。这就是所谓的八度空间。
#     当我们在金字塔中往上走时，同样的模式会继续下去（即，分辨率下降）。
#     同样地，在扩展时，每一级的面积都会变成4倍。
#
#     拉普拉斯金字塔是由高斯金字塔形成的。这方面没有专属函数。
#     拉普拉斯金字塔图像只像边缘图像。它的大部分元素是零。
#     它们被用于图像压缩。拉普拉斯金字塔中的一个层次是由高斯金字塔中该层次与
#     高斯金字塔中其上层的扩展版本之间的差异形成的。
# """
rDown_img = cv.pyrDown(color_img)   # 降低分辨率（金字塔升
cv.imshow("rDown_img", rDown_img)
cv.waitKey()

rUp_img = cv.pyrUp(color_img)       # 提高分辨率（金字塔降
cv.imshow("rUp_img", rUp_img)
cv.waitKey()